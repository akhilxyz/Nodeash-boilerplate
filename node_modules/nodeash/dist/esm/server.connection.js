'use strict';
import http from 'http';
import express from 'express';
import bodyParser from 'body-parser';
import helmet from 'helmet';
import cors from 'cors';
import debug from 'debug';
const debugInstance = debug('node');
class ServerClient {
    constructor(options = {}) {
        this.initMiddleware = () => {
            this.app.set('port', this.port);
            this.app.use(helmet());
            this.app.use(cors());
            this.app.use(bodyParser.json());
            this.app.use(bodyParser.urlencoded({ extended: true, limit: '5mb' }));
            this.app.use((req, _res, next) => {
                console.log(`[${new Date().toISOString()}] 🧪 ${req.method} ${req.url}`);
                next();
            });
        };
        this.initControllers = (controllers) => {
            if (controllers.length > 0) {
                controllers.forEach((controller) => {
                    this.app.use(`${this.baseUrl}`, controller.router);
                });
            }
            this.app.use(`${this.baseUrl}/status`, (_req, res) => {
                return res.send({
                    isSuccess: true,
                    memory: process.memoryUsage(),
                    results: {
                        message: `App is running on Port ${this.port}.`,
                    },
                    Date: new Date(),
                });
            });
        };
        this.startServer = () => {
            this.app_Server.on('error', this.onError);
            this.app_Server.on('listening', this.onListening);
            this.app_Server.listen(this.port);
        };
        this.onListening = () => {
            const bind = `port ${this.port}`;
            debugInstance('Listening on ' + bind);
            console.log(`ᴀᴘᴘ ɪꜱ ʟɪꜱᴛᴇɴɪɴɢ ᴏɴ ᴘᴏʀᴛ ${this.port}`);
        };
        this.onError = (error) => {
            if (error instanceof Error) {
                throw error;
            }
            const errnoError = error;
            if (errnoError.syscall !== undefined) {
                const bind = `port ${this.port}`;
                switch (errnoError.code) {
                    case 'EACCES':
                        console.log(bind + ' requires elevated privileges');
                        break;
                    case 'EADDRINUSE':
                        console.log(bind + ' is already in use');
                        break;
                    default:
                        throw error;
                }
                process.exit(1);
            }
        };
        const { controllers = [], port = 3000, baseUrl = "" } = options;
        this.app = express();
        this.app_Server = http.createServer(this.app);
        this.port = port;
        this.baseUrl = baseUrl;
        this.initMiddleware();
        this.initControllers(controllers);
        // this.startProcess();
    }
}
export default ServerClient;
