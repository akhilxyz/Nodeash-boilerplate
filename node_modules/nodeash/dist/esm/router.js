import { Router } from 'express';
class NodeashRoutes {
    constructor() {
        this.router = Router();
    }
    initializeRoutes(path, controllers) {
        controllers.forEach(controller => {
            const { method, endpoint, handler, middleware } = controller;
            const allMiddleware = middleware || [];
            if (method && endpoint && handler) {
                if (allMiddleware.length > 0) {
                    allMiddleware.forEach(mw => {
                        this.router.use(`${path}${endpoint}`, mw);
                    });
                }
                switch (method.toLowerCase()) {
                    case 'get':
                        this.router.get(`${path}${endpoint}`, handler);
                        break;
                    case 'post':
                        this.router.post(`${path}${endpoint}`, handler);
                        break;
                    case 'put':
                        this.router.put(`${path}${endpoint}`, handler);
                        break;
                    case 'delete':
                        this.router.delete(`${path}${endpoint}`, handler);
                        break;
                    case 'all':
                        this.router.all(`${path}${endpoint}`, handler);
                        break;
                    default:
                        console.error(`Unsupported HTTP method: ${method}`);
                }
            }
            else {
                console.error(`Invalid controller: ${controller}`);
            }
        });
    }
}
export default NodeashRoutes;
