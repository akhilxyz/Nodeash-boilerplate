var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Sequelize } from 'sequelize';
class Database {
    constructor(DB, logging) {
        var _a;
        try {
            this.write = new Sequelize(DB.name, DB.username, DB.password, {
                host: DB.hostName,
                dialect: 'mysql',
                logging,
                define: {
                    charset: 'utf8',
                    collate: 'utf8_general_ci',
                    underscored: true,
                    timestamps: true,
                    createdAt: true,
                    updatedAt: true,
                },
                pool: {
                    max: 5,
                    min: 0,
                    idle: 20000,
                    acquire: 20000,
                },
            });
            this.read = new Sequelize(DB.name, DB.username, DB.password, {
                host: DB.hostName,
                dialect: 'mysql',
                logging,
                define: {
                    charset: 'utf8',
                    collate: 'utf8_general_ci',
                    underscored: true,
                    timestamps: true,
                    createdAt: true,
                    updatedAt: false,
                },
                pool: {
                    max: 5,
                    min: 0,
                    idle: 20000,
                    acquire: 20000,
                },
            });
            this.syncTables();
        }
        catch (error) {
            console.log("error", (_a = error.message) !== null && _a !== void 0 ? _a : error);
        }
    }
    syncTables() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.write.sync({ alter: true });
        });
    }
    checkDatabaseConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.write.authenticate();
                yield this.read.authenticate();
                console.log('Database connection established successfully. ðŸš€ðŸš€ðŸš€');
                return true;
            }
            catch (error) {
                console.log('Error connecting to the database:', error);
                return false;
            }
        });
    }
}
const SQLClient = (DB, logging = false) => {
    const database = new Database(DB, logging);
    return {
        DBWrite: database.write,
        DBRead: database.read,
        checkDatabaseConnection: database.checkDatabaseConnection.bind(database),
    };
};
export default SQLClient;
